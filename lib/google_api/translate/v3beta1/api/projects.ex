# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Translate.V3beta1.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.Translate.V3beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  
  @doc """
  Detects the language of text within a request.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}/locations/{location-id}` or
      `projects/{project-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Only models within the same region (has same location-id) can be used.
      Otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.DetectLanguageRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_detect_language(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_detect_language(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}:detectLanguage", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse{}])
  end
  
  @doc """
  Returns a list of supported languages for translation.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}` or
      `projects/{project-id}/locations/{location-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Non-global location is required for AutoML models.

      Only models within the same region (have same location-id) can be used,
      otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:displayLanguageCode` (*type:* `String.t`) - Optional. The language to use to return localized, human readable names
          of supported languages. If missing, then display names are not returned
          in a response.
      *   `:model` (*type:* `String.t`) - Optional. Get supported languages of this model.

          The format depends on model type:

          - AutoML Translation models:
            `projects/{project-id}/locations/{location-id}/models/{model-id}`

          - General (built-in) models:
            `projects/{project-id}/locations/{location-id}/models/general/nmt`,
            `projects/{project-id}/locations/{location-id}/models/general/base`


          Returns languages supported by the specified model.
          If missing, we get supported languages of Google general base (PBMT) model.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.SupportedLanguages{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_get_supported_languages(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.SupportedLanguages.t} | {:error, Tesla.Env.t()}
  def translate_projects_get_supported_languages(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"displayLanguageCode" => :"query",
    
      :"model" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+parent}/supportedLanguages", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.SupportedLanguages{}])
  end
  
  @doc """
  Translates input text and returns translated text.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}` or
      `projects/{project-id}/locations/{location-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Non-global location is required for requests using AutoML models or
      custom glossaries.

      Models and glossaries must be within the same region (have same
      location-id), otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.TranslateTextRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.TranslateTextResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_translate_text(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.TranslateTextResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_translate_text(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}:translateText", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.TranslateTextResponse{}])
  end
  
  @doc """
  Translates a large volume of text in asynchronous batch mode.
  This function provides real-time output as the inputs are being processed.
  If caller cancels a request, the partial results (for an input file, it's
  all or nothing) may still be available on the specified output location.

  This call returns immediately and you can
  use google.longrunning.Operation.name to poll the status of the call.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Location to make a call. Must refer to a caller's project.

      Format: `projects/{project-id}/locations/{location-id}`.

      The `global` location is not supported for batch translation.

      Only AutoML Translation models or glossaries within the same region (have
      the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)
      error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.BatchTranslateTextRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_batch_translate_text(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Operation.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_batch_translate_text(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}:batchTranslateText", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Operation{}])
  end
  
  @doc """
  Detects the language of text within a request.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}/locations/{location-id}` or
      `projects/{project-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Only models within the same region (has same location-id) can be used.
      Otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.DetectLanguageRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_detect_language(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_detect_language(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}:detectLanguage", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.DetectLanguageResponse{}])
  end
  
  @doc """
  Gets information about a location.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Resource name for the location.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Location{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Location.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Location{}])
  end
  
  @doc """
  Returns a list of supported languages for translation.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}` or
      `projects/{project-id}/locations/{location-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Non-global location is required for AutoML models.

      Only models within the same region (have same location-id) can be used,
      otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:displayLanguageCode` (*type:* `String.t`) - Optional. The language to use to return localized, human readable names
          of supported languages. If missing, then display names are not returned
          in a response.
      *   `:model` (*type:* `String.t`) - Optional. Get supported languages of this model.

          The format depends on model type:

          - AutoML Translation models:
            `projects/{project-id}/locations/{location-id}/models/{model-id}`

          - General (built-in) models:
            `projects/{project-id}/locations/{location-id}/models/general/nmt`,
            `projects/{project-id}/locations/{location-id}/models/general/base`


          Returns languages supported by the specified model.
          If missing, we get supported languages of Google general base (PBMT) model.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.SupportedLanguages{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_get_supported_languages(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.SupportedLanguages.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_get_supported_languages(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"displayLanguageCode" => :"query",
    
      :"model" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+parent}/supportedLanguages", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.SupportedLanguages{}])
  end
  
  @doc """
  Lists information about the supported locations for this service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The resource that owns the locations collection, if applicable.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filter` (*type:* `String.t`) - The standard list filter.
      *   `:pageSize` (*type:* `integer()`) - The standard list page size.
      *   `:pageToken` (*type:* `String.t`) - The standard list page token.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.ListLocationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.ListLocationsResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_list(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"filter" => :"query",
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+name}/locations", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.ListLocationsResponse{}])
  end
  
  @doc """
  Translates input text and returns translated text.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. Project or location to make a call. Must refer to a caller's
      project.

      Format: `projects/{project-id}` or
      `projects/{project-id}/locations/{location-id}`.

      For global calls, use `projects/{project-id}/locations/global` or
      `projects/{project-id}`.

      Non-global location is required for requests using AutoML models or
      custom glossaries.

      Models and glossaries must be within the same region (have same
      location-id), otherwise an INVALID_ARGUMENT (400) error is returned.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.TranslateTextRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.TranslateTextResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_translate_text(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.TranslateTextResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_translate_text(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}:translateText", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.TranslateTextResponse{}])
  end
  
  @doc """
  Creates a glossary and returns the long-running operation. Returns
  NOT_FOUND, if the project doesn't exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The project name.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.Glossary.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_glossaries_create(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Operation.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_glossaries_create(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+parent}/glossaries", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Operation{}])
  end
  
  @doc """
  Deletes a glossary, or cancels glossary construction
  if the glossary isn't created yet.
  Returns NOT_FOUND, if the glossary doesn't exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the glossary to delete.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_glossaries_delete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Operation.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_glossaries_delete(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"delete")
      |> Request.url("/v3beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Operation{}])
  end
  
  @doc """
  Gets a glossary. Returns NOT_FOUND, if the glossary doesn't
  exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - Required. The name of the glossary to retrieve.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Glossary{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_glossaries_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Glossary.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_glossaries_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Glossary{}])
  end
  
  @doc """
  Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
  exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `parent` (*type:* `String.t`) - Required. The name of the project from which to list all of the glossaries.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filter` (*type:* `String.t`) - Optional. Filter specifying constraints of a list operation.
          Filtering is not supported yet, and the parameter currently has no effect.
          If missing, no filtering is performed.
      *   `:pageSize` (*type:* `integer()`) - Optional. Requested page size. The server may return fewer glossaries than
          requested. If unspecified, the server picks an appropriate default.
      *   `:pageToken` (*type:* `String.t`) - Optional. A token identifying a page of results the server should return.
          Typically, this is the value of [ListGlossariesResponse.next_page_token]
          returned from the previous call to `ListGlossaries` method.
          The first page is returned if `page_token`is empty or missing.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.ListGlossariesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_glossaries_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.ListGlossariesResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_glossaries_list(connection, parent, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"filter" => :"query",
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+parent}/glossaries", %{
        "parent" => URI.encode(parent, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.ListGlossariesResponse{}])
  end
  
  @doc """
  Starts asynchronous cancellation on a long-running operation.  The server
  makes a best effort to cancel the operation, but success is not
  guaranteed.  If the server doesn't support this method, it returns
  `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
  Operations.GetOperation or
  other methods to check whether the cancellation succeeded or whether the
  operation completed despite cancellation. On successful cancellation,
  the operation is not deleted; instead, it becomes an operation with
  an Operation.error value with a google.rpc.Status.code of 1,
  corresponding to `Code.CANCELLED`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation resource to be cancelled.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.CancelOperationRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_operations_cancel(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Empty.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_operations_cancel(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+name}:cancel", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Empty{}])
  end
  
  @doc """
  Deletes a long-running operation. This method indicates that the client is
  no longer interested in the operation result. It does not cancel the
  operation. If the server doesn't support this method, it returns
  `google.rpc.Code.UNIMPLEMENTED`.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation resource to be deleted.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Empty{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_operations_delete(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Empty.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_operations_delete(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"delete")
      |> Request.url("/v3beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Empty{}])
  end
  
  @doc """
  Gets the latest state of a long-running operation.  Clients can use this
  method to poll the operation result at intervals as recommended by the API
  service.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation resource.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_operations_get(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Operation.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_operations_get(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+name}", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Operation{}])
  end
  
  @doc """
  Lists operations that match the specified filter in the request. If the
  server doesn't support this method, it returns `UNIMPLEMENTED`.

  NOTE: the `name` binding allows API services to override the binding
  to use different resource name schemes, such as `users/*/operations`. To
  override the binding, API services can add a binding such as
  `"/v1/{name=users/*}/operations"` to their service configuration.
  For backwards compatibility, the default name includes the operations
  collection id, however overriding users must ensure the name binding
  is the parent resource, without the operations collection id.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation's parent resource.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:filter` (*type:* `String.t`) - The standard list filter.
      *   `:pageSize` (*type:* `integer()`) - The standard list page size.
      *   `:pageToken` (*type:* `String.t`) - The standard list page token.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.ListOperationsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_operations_list(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.ListOperationsResponse.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_operations_list(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"filter" => :"query",
    
      :"pageSize" => :"query",
    
      :"pageToken" => :"query",
    
    }

    request =
      Request.new()
      |> Request.method(:"get")
      |> Request.url("/v3beta1/{+name}/operations", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.ListOperationsResponse{}])
  end
  
  @doc """
  Waits for the specified long-running operation until it is done or reaches
  at most a specified timeout, returning the latest state.  If the operation
  is already done, the latest state is immediately returned.  If the timeout
  specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
  timeout is used.  If the server does not support this method, it returns
  `google.rpc.Code.UNIMPLEMENTED`.
  Note that this method is on a best-effort basis.  It may return the latest
  state before the specified timeout (including immediately), meaning even an
  immediate response is no guarantee that the operation is done.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Translate.V3beta1.Connection.t`) - Connection to server
  *   `name` (*type:* `String.t`) - The name of the operation resource to wait on.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.Translate.V3beta1.Model.WaitOperationRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Translate.V3beta1.Model.Operation{}}` on success
  *   `{:error, info}` on failure
  """
  @spec translate_projects_locations_operations_wait(Tesla.Env.client(), String.t, keyword(), keyword()) :: {:ok, GoogleApi.Translate.V3beta1.Model.Operation.t} | {:error, Tesla.Env.t()}
  def translate_projects_locations_operations_wait(connection, name, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
    
      :"$.xgafv" => :"query",
    
      :"access_token" => :"query",
    
      :"alt" => :"query",
    
      :"callback" => :"query",
    
      :"fields" => :"query",
    
      :"key" => :"query",
    
      :"oauth_token" => :"query",
    
      :"prettyPrint" => :"query",
    
      :"quotaUser" => :"query",
    
      :"uploadType" => :"query",
    
      :"upload_protocol" => :"query",
    
    
      :"body" => :"body",
    
    }

    request =
      Request.new()
      |> Request.method(:"post")
      |> Request.url("/v3beta1/{+name}:wait", %{
        "name" => URI.encode(name, &URI.char_unreserved?/1),
      })
      
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Translate.V3beta1.Model.Operation{}])
  end
  
end
